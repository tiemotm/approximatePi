{"version":3,"sources":["components/PiPlot.js","components/MathExplanation.js","App.js","index.js"],"names":["PiPlot","initialData","n","hits","x","y","colors","pi","useState","data","setData","input","setInput","estimatePi","Array","i","Math","random","sqrt","Container","Row","className","fluid","type","mode","marker","color","layout","autosize","showlegend","xaxis","fixedrange","range","mirror","ticks","showline","yaxis","shapes","xref","yref","x0","y0","x1","y1","line","width","useResizeHandler","style","position","height","config","staticPlot","Form","onSubmit","e","preventDefault","parseInt","console","log","Col","Control","value","placeholder","onChange","target","xl","Button","onClick","MathExplanation","Provider","Node","formula","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.76849590.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Plot from \"react-plotly.js\";\nimport {Container, Row, Col, Form, Button} from 'react-bootstrap'\n\nfunction PiPlot() {\n    \n    //Initial empty data (x, y, colors for markers)\n    const initialData = {\n        n: 0,\n        hits: 0,\n        x: [],\n        y: [],\n        colors: [],\n        pi: 0.0,\n    }\n\n    //Use state for updating data\n    const [data, setData] = useState(initialData)\n\n    //Form input\n    const [input, setInput] = useState(\"\")\n\n    //Update input if changes\n    const handleChange = (e) => {\n        setInput(e.target.value)\n        console.log(\"Changed to: \" + e.target.value)\n    }\n    \n    //If submitted form check if input value is not empty, compute data and reset form\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        if(input !== \"\") {\n            estimatePi(parseInt(input))\n        }\n        \n        console.log(\"Computed data:\")\n        console.log(data)\n        //resetInput()\n    }\n\n    const resetForm = () => {\n        setData(initialData)\n        setInput(\"\")\n    }\n\n    const estimatePi = (n) => {\n        //temp arrays for storing points\n        let x = Array(n)\n        let y = Array(n)\n        let colors = Array(n)\n        let hits = 0\n\n        for (let i = 0; i < n; i++) {\n            x[i] = Math.random();\n            y[i] = Math.random();\n            \n            let norm = Math.sqrt((x[i] ** 2) + (y[i] ** 2))\n\n            //If point inside circle color red, if outside color blue\n            if(norm < 1){\n                hits++\n                colors[i] = \"red\"\n            } else {\n                colors[i] = \"blue\"\n            }\n        }\n\n        let pi = (4 * (hits/n))\n\n        //Update data\n        setData({\n            n: n,\n            hits: hits,\n            x: x,\n            y: y,\n            colors: colors,\n            pi: pi,\n        })\n    }\n\n    return (\n        <Container>\n            <Row className=\"d-flex justify-content-center text-center\">\n                <Container fluid className=\"ratio ratio-1x1\">\n                    <Plot\n                        data={[\n                            {\n                                x: data.x,\n                                y: data.y,\n                                type: 'scatter',\n                                mode: 'markers',\n                                marker: {color: data.colors},\n                            },\n                        ]}\n                        \n                        layout={{\n                            \n                            autosize: true,\n                            showlegend: false,\n                            \n                            xaxis: {\n                                fixedrange: true,\n                                range: [0, 1],\n                                mirror: true,\n                                ticks: 'outside',\n                                showline: true,\n                            },\n                            \n                            yaxis: {\n                                fixedrange: true,\n                                range: [0, 1],\n                                mirror: true,\n                                ticks: 'outside',\n                                showline: true,\n                            },\n                            \n                            shapes: [\n                                {\n                                    type: 'circle',\n                                    xref: 'x',\n                                    yref: 'y',\n                                    x0: '-1',\n                                    y0: '-1',\n                                    x1: '1',\n                                    y1: '1',\n                                    line: {\n                                        color: 'black',\n                                        width: ''\n                                    }\n                                },\n                            ]\n                        }}\n                        \n                        useResizeHandler={true}\n                        \n                        style={{\n                            position: 'absolute',\n                            width: '100%',\n                            height: '100%',\n                        }}\n                        \n                        config={{\n                            staticPlot: true,\n                        }}\n                        />\n                </Container>\n                {data.pi ? <h2 className=\"p-3\">π ≈ {data.pi}</h2> : \"\"}\n            </Row>\n            <Row className=\"px-5\">\n                <Form onSubmit={handleSubmit}>\n                    <Container className=\"py-1 px-0 d-flex justify-content-center\">\n                        <Row>\n                            <Col className=\"py-1 px-0\">\n                                <Form.Control\n                                    className=\"\"\n                                    type=\"number\"\n                                    value={input}\n                                    placeholder=\"Enter number\"\n                                    onChange={handleChange}\n                                />\n                            </Col>\n                            <Col xl className=\"py-1 px-0\">\n                                <div className=\"d-flex justify-content-center\">\n                                    <Button className=\"me-2\" type=\"submit\">Calculate</Button>\n                                    <Button className=\"px-4\" onClick={resetForm}>Reset</Button>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Form>\n            </Row>\n        </Container> \n    );\n}\n\nexport default PiPlot","import MathJax from \"react-mathjax\"\n\nfunction MathExplanation() {\n\n    return (\n        <MathJax.Provider>\n            <MathJax.Node formula={\n                \"A_{square} = (2\\\\pi)^2 =  4r^2 \\\\iff \\\\frac{A_{square}}{4} = r^2\"\n            }/>\n            <MathJax.Node formula={\"A_{circle} = \\\\pi r^2 \\\\iff \\\\frac{A_{circle}}{4} = \\\\frac{\\\\pi r^2}{4}\"}/>\n            <MathJax.Node formula={\"\\\\frac{\\\\frac{A_{circle}}{4}}{\\\\frac{A_{square}}{4}} = \\\\frac{\\\\frac{\\\\pi r^2}{4}}{r^2} \\\\iff \\\\frac{\\\\pi}{4}\"}/>\n            <p>\n                The ratio of the areas of the square and the circle is\n                equal to the ratio of the number of points that fall into the\n                circle and the number of points within the square\n                (total number of generated points).\n            </p>\n            <MathJax.Node formula={\"\\\\frac{\\\\frac{A_{circle}}{4}}{\\\\frac{A_{square}}{4}} = \\\\frac{\\\\text{Number of points in circle}}{\\\\text{Total number of points}} = \\\\frac{\\\\pi}{4}\"}/>\n            <MathJax.Node formula={\"\\\\iff \\\\pi = \\\\frac{\\\\text{Number of points in circle}}{\\\\text{Total number of points}} \\\\cdot 4\"}/>\n        </MathJax.Provider>\n    )\n}\n\nexport default MathExplanation","import PiPlot from './components/PiPlot';\nimport MathExplanation from './components/MathExplanation';\nimport {Container, Row, Col} from 'react-bootstrap'\n\n\nfunction App() {\n  return (\n    <Container className=\"p-3\" fluid=\"lg\">\n      <Container fluid className=\"text-center p-4\">\n        <h1>Monte Carlo Simulation of π</h1>\n      </Container>\n      <Row>\n        <Col>\n          <Container>\n            <h2 className=\"p-3 text-center\">Explanation</h2>\n            <MathExplanation/>\n          </Container>\n        </Col>\n        <Col xl>\n          <Container fluid className=\"p-0\">\n            <PiPlot/>\n          </Container>\n        </Col>\n      </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './scss/custom.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}