{"version":3,"sources":["components/MonteCarloMethod.js","components/MathExplanationMonteCarlo.js","components/Polygon.js","components/ArchimedesMethod.js","components/GregoyLeibnizSeries.js","App.js","index.js"],"names":["MonteCarloMethod","initialData","n","hits","x","y","colors","pi","useState","data","setData","input","setInput","estimatePi","Array","i","Math","random","sqrt","Container","Row","className","fluid","type","mode","marker","color","layout","autosize","showlegend","margin","t","b","l","r","xaxis","fixedrange","range","mirror","ticks","showline","yaxis","shapes","xref","yref","x0","y0","x1","y1","line","width","useResizeHandler","style","position","height","config","staticPlot","Form","onSubmit","e","preventDefault","parseInt","console","log","Col","Control","value","placeholder","onChange","target","xl","Button","onClick","MathExplanationMonteCarlo","Provider","Node","formula","Polygon","props","points","sides","push","cx","round","sin","PI","cy","cos","pointsStr","forEach","point","viewBox","fill","stroke","strokeWidth","ArchimedesMethod","setSides","setPi","useEffect","Label","Range","min","max","GregoryLeibnizSeries","setN","series","seriesPi","sum","pow","autorange","rangemode","App","maxWidth","minWidth","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.3ecf386e.chunk.js","sourcesContent":["import React, { useState } from 'react';\nimport Plot from \"react-plotly.js\";\nimport {Container, Row, Col, Form, Button} from 'react-bootstrap'\n\nfunction MonteCarloMethod() {\n    \n    //Initial empty data (x, y, colors for markers)\n    const initialData = {\n        n: 0,\n        hits: 0,\n        x: [],\n        y: [],\n        colors: [],\n        pi: 0.0,\n    }\n\n    //Use state for updating data\n    const [data, setData] = useState(initialData)\n\n    //Form input\n    const [input, setInput] = useState(\"\")\n\n    //Update input if changes\n    const handleChange = (e) => {\n        setInput(e.target.value)\n        console.log(\"Changed to: \" + e.target.value)\n    }\n    \n    //If submitted form check if input value is not empty, compute data and reset form\n    const handleSubmit = (e) => {\n        e.preventDefault()\n\n        if(input !== \"\") {\n            estimatePi(parseInt(input))\n        }\n        \n        console.log(\"Computed data:\")\n        console.log(data)\n        //resetInput()\n    }\n\n    const resetForm = () => {\n        setData(initialData)\n        setInput(\"\")\n    }\n\n    const estimatePi = (n) => {\n        //temp arrays for storing points\n        let x = Array(n)\n        let y = Array(n)\n        let colors = Array(n)\n        let hits = 0\n\n        for (let i = 0; i < n; i++) {\n            x[i] = Math.random();\n            y[i] = Math.random();\n            \n            let norm = Math.sqrt((x[i] ** 2) + (y[i] ** 2))\n\n            //If point inside circle color red, if outside color blue\n            if(norm < 1){\n                hits++\n                colors[i] = \"red\"\n            } else {\n                colors[i] = \"blue\"\n            }\n        }\n\n        let pi = (4 * (hits/n))\n\n        //Update data\n        setData({\n            n: n,\n            hits: hits,\n            x: x,\n            y: y,\n            colors: colors,\n            pi: pi,\n        })\n    }\n\n    return (\n        <Container>\n            <Row className=\"d-flex justify-content-center text-center\">\n                <Container fluid className=\"ratio ratio-1x1\">\n                    <Plot\n                        data={[\n                            {\n                                x: data.x,\n                                y: data.y,\n                                type: 'scatter',\n                                mode: 'markers',\n                                marker: {color: data.colors},\n                            },\n                        ]}\n                        \n                        layout={{\n                            \n                            autosize: true,\n                            showlegend: false,\n                            margin: {\n                                t: 25, b: 25, l: 25, r: 25\n                            },\n\n                            xaxis: {\n                                fixedrange: true,\n                                range: [0, 1],\n                                mirror: true,\n                                ticks: 'outside',\n                                showline: true,\n                            },\n                            \n                            yaxis: {\n                                fixedrange: true,\n                                range: [0, 1],\n                                mirror: true,\n                                ticks: 'outside',\n                                showline: true,\n                            },\n                            \n                            shapes: [\n                                {\n                                    type: 'circle',\n                                    xref: 'x',\n                                    yref: 'y',\n                                    x0: '-1',\n                                    y0: '-1',\n                                    x1: '1',\n                                    y1: '1',\n                                    line: {\n                                        color: 'black',\n                                        width: ''\n                                    }\n                                },\n                            ]\n                        }}\n                        \n                        useResizeHandler={true}\n                        \n                        style={{\n                            position: 'absolute',\n                            width: '100%',\n                            height: '100%',\n                        }}\n                        \n                        config={{\n                            staticPlot: true,\n                        }}\n                        />\n                </Container>\n                {data.pi ? <h2 className=\"py-3 px-0\">π ≈ {data.pi}</h2> : \"\"}\n            </Row>\n            <Row className=\"px-4 py-2\">\n                <Form onSubmit={handleSubmit}>\n                    {\n                        parseInt(input) > 30000 ?\n                            <Row>\n                                <Container fluid className=\"alert alert-danger text-center\">\n                                    Large inputs can cause performace issues\n                                </Container>\n                            </Row>\n                            :\n                            \"\"\n                    }\n                    <Container className=\"py-1 px-0 d-flex justify-content-center\">\n                        <Row>\n                            <Col className=\"py-1 px-0\">\n                                <Form.Control\n                                    className=\"\"\n                                    type=\"number\"\n                                    value={input}\n                                    placeholder=\"Enter number\"\n                                    onChange={handleChange}\n                                />\n                            </Col>\n                            <Col xl className=\"py-1 px-0\">\n                                <div className=\"d-flex justify-content-center\">\n                                    <Button className=\"me-2\" type=\"submit\">Calculate</Button>\n                                    <Button className=\"px-4\" onClick={resetForm}>Reset</Button>\n                                </div>\n                            </Col>\n                        </Row>\n                    </Container>\n                </Form>\n            </Row>\n        </Container> \n    );\n}\n\nexport default MonteCarloMethod","import MathJax from \"react-mathjax\"\n\nfunction MathExplanationMonteCarlo() {\n\n    return (\n        <MathJax.Provider>\n            <MathJax.Node formula={\n                \"A_{square} = (2\\\\pi)^2 =  4r^2 \\\\iff \\\\frac{A_{square}}{4} = r^2\"\n            }/>\n            <MathJax.Node formula={\"A_{circle} = \\\\pi r^2 \\\\iff \\\\frac{A_{circle}}{4} = \\\\frac{\\\\pi r^2}{4}\"}/>\n            <MathJax.Node formula={\"\\\\frac{\\\\frac{A_{circle}}{4}}{\\\\frac{A_{square}}{4}} = \\\\frac{\\\\frac{\\\\pi r^2}{4}}{r^2} \\\\iff \\\\frac{\\\\pi}{4}\"}/>\n            <p>\n                The ratio of the areas of the square and the circle is\n                equal to the ratio of the number of points that fall into the\n                circle and the number of points within the square\n                (total number of generated points).\n            </p>\n            <MathJax.Node formula={\"\\\\frac{\\\\frac{A_{circle}}{4}}{\\\\frac{A_{square}}{4}} = \\\\frac{\\\\text{Number of points in circle}}{\\\\text{Total number of points}} = \\\\frac{\\\\pi}{4}\"}/>\n            <MathJax.Node formula={\"\\\\iff \\\\pi = \\\\frac{\\\\text{Number of points in circle}}{\\\\text{Total number of points}} \\\\cdot 4\"}/>\n        </MathJax.Provider>\n    )\n}\n\nexport default MathExplanationMonteCarlo","import { useRef, useEffect } from \"react\";\n\nfunction Polygon(props) {\n\n    let points = []\n\n    for (let i = 1; i < props.sides + 2; i++) {\n        points.push({\n          x:\n            props.cx +\n            Math.round(props.r * Math.sin((Math.PI / (props.sides / 2)) * i)),\n          y:\n            props.cy +\n            Math.round(props.r * Math.cos((Math.PI / (props.sides / 2)) * i))\n        });\n    }\n\n    let pointsStr = \"\"\n    \n    points.forEach(point => {\n        pointsStr += `${point.x}, ${point.y} `\n    })\n\n    return (\n        <svg viewBox=\"0 0 710 710\" width=\"100%\" height=\"100%\">\n            <circle r=\"350\" cx=\"355\" cy=\"355\" fill=\"none\" stroke=\"black\" strokeWidth=\"3\"/>\n            <polygon points={pointsStr} fill=\"none\" stroke=\"red\" strokeWidth=\"3\"/>\n        </svg>\n    )\n}\n\nexport default Polygon","import { Container } from \"react-bootstrap\"\nimport { useState, useEffect } from \"react\";\nimport Polygon from \"./Polygon\"\nimport { Row, Col, Form } from 'react-bootstrap'\n\n// TODO: change calculation to not use pi constant\nfunction ArchimedesMethod() {\n    const [sides, setSides] = useState(3)\n    const [pi, setPi] = useState(0.0)\n\n    useEffect(() => {\n        setPi(sides * Math.sin(1/sides * Math.PI))\n    })\n\n    const handleChange = (e) => {\n        setSides(e.target.value)\n        console.log(\"Changed to: \" + e.target.value)\n    }\n    \n    return (\n        <Container className=\"p-2\">\n            <Row className=\"d-flex justify-content-center text-center p-2\">\n                <Container fluid className=\"ratio ratio-1x1 py-5\">\n                    <Polygon sides={sides} cx={355} cy={355} r={350}/>\n                </Container>\n                <h2 className=\"py-3 px-0\">π ≈ {pi}</h2>\n            </Row>\n            <Row className=\"px-4\">\n                <Form>\n                    <Container className=\"py-1 px-0\">\n                        <Row>\n                            <Col className=\"py-1 px-0\">\n                                <Form.Label>\n                                    Sides: {sides}\n                                </Form.Label>\n                                <Form.Range\n                                    min={3}\n                                    max={100}\n                                    className=\"\"\n                                    type=\"number\"\n                                    value={sides}\n                                    placeholder=\"Enter number\"\n                                    onChange={handleChange}\n                                />\n                            </Col>\n                        </Row>\n                    </Container>\n                </Form>\n            </Row>\n        </Container>\n    )\n}\n\nexport default ArchimedesMethod","import {Container, Row, Col, Form} from \"react-bootstrap\";\nimport MathJax from \"react-mathjax\";\nimport React, {useEffect, useState} from \"react\";\nimport Plot from \"react-plotly.js\";\n\nfunction GregoryLeibnizSeries() {\n\n    const initialData = {\n        x: [],\n        y: [],\n        pi: 0.0,\n    }\n\n    const [data, setData] = useState(initialData);\n    const [n, setN] = useState(0);\n\n    useEffect(() => {\n        console.log(n)\n        var series = seriesPi(n)\n        console.log(series.x, series.y, series.pi)\n        setData({\n            x: series.x,\n            y: series.y,\n            pi: series.pi\n        })\n    }, [n, ])\n\n    const handleChange = (e) => {\n        setN(e.target.value)\n    }\n\n    const seriesPi = (n) => {\n        var sum = 0\n        var x = Array(n)\n        var y = Array(n)\n\n        for (let i = 0; i <= n; i++) {\n            sum += Math.pow(-1, i)/(2*i+1)\n            x[i] = i\n            y[i] = (4 * sum)\n        }\n\n        var pi = 4 * sum\n\n        return {x: x, y: y, pi: pi}\n    }\n\n    return (\n        <Container>\n            <Row className=\"d-flex justify-content-center text-center\">\n                <Container fluid className=\"ratio ratio-1x1\">\n                    <Plot\n                        data={[\n                            {\n                                x: data.x,\n                                y: data.y,\n                                mode: 'lines',\n                                line: {\n                                    color: 'red',\n                                    width: 3\n                                }\n                            },\n                        ]}\n\n                        layout={{\n\n                            autosize: true,\n                            showlegend: false,\n                            margin: {\n                                t: 25, b: 25, l: 25, r: 25\n                            },\n\n                            xaxis: {\n                                autorange: true,\n                                rangemode: 'tozero',\n                                ticks: 'outside',\n                                showline: true,\n                            },\n\n                            yaxis: {\n                                autorange: true,\n                                ticks: 'outside',\n                                showline: true,\n                            },\n\n                            shapes: [\n                            ]\n                        }}\n\n                        useResizeHandler={true}\n\n                        style={{\n                            position: 'absolute',\n                            width: '100%',\n                            height: '100%',\n                        }}\n\n                        config={{\n                            staticPlot: true,\n                        }}\n                    />\n                </Container>\n                {data.pi ? <h2 className=\"py-3 px-0\">π ≈ {data.pi}</h2> : \"\"}\n            </Row>\n            {/*<MathJax.Provider>\n                <MathJax.Node formula={\"\\\\pi = 4\\\\sum_{i=1}^{\\\\infty} \\\\frac{(-1)^{i}}{2i+1}\"}/>\n            </MathJax.Provider>*/}\n            <Row className=\"px-4 py-1\">\n                <Form>\n                    <Container className=\"py-1 px-0\">\n                        <Row>\n                            <Col className=\"py-1 px-0\">\n                                <Form.Label>\n                                    n: {n}\n                                </Form.Label>\n                                <Form.Range\n                                    min={0}\n                                    max={500}\n                                    className=\"\"\n                                    type=\"number\"\n                                    value={n}\n                                    placeholder=\"Enter number\"\n                                    onChange={handleChange}\n                                />\n                            </Col>\n                        </Row>\n                    </Container>\n                </Form>\n            </Row>\n        </Container>\n    )\n}\n\nexport default GregoryLeibnizSeries","import MonteCarloMethod from './components/MonteCarloMethod';\nimport MathExplanationMonteCarlo from './components/MathExplanationMonteCarlo';\nimport {Container, Row, Col} from 'react-bootstrap'\nimport ArchimedesMethod from './components/ArchimedesMethod';\nimport GregoryLeibnizSeries from \"./components/GregoyLeibnizSeries\";\n\n// TODO: Write explanation for archimedes method\n// TODO: Write explanation for gregory leibniz series\nfunction App() {\n  return (\n    <Container className=\"p-3\" fluid=\"lg\">\n        <Container fluid className=\"text-center p-4\">\n            <h1 className=\"display-3 fw-bold\">Approximate π</h1>\n        </Container>\n        <Container fluid className=\"text-center p-4\">\n            <h2>Monte Carlo Simulation</h2>\n        </Container>\n        <Row className=\"mb-5\">\n            <Col>\n                <Container>\n                    <h3 className=\"p-2 text-center\">Explanation</h3>\n                    <MathExplanationMonteCarlo/>\n                </Container>\n            </Col>\n            <Col>\n                <Container fluid style={{maxWidth: 500, minWidth:350}} className=\"p-0\">\n                    <MonteCarloMethod/>\n                </Container>\n            </Col>\n        </Row>\n        <Container fluid className=\"text-center p-4\">\n            <h2>Archimedes Method</h2>\n        </Container>\n        <Row className=\"mb-5\">\n            <Col>\n                <Container>\n                    <h3 className=\"p-2 text-center\">Explanation</h3>\n                    <p className=\"text-center text-muted\">Coming soon.</p>\n                </Container>\n            </Col>\n            <Col>\n                <Container fluid style={{maxWidth: 500, minWidth:350}} className=\"p-0\">\n                    <ArchimedesMethod/>\n                </Container>\n            </Col>\n        </Row>\n        <Container fluid className=\"text-center p-4\">\n            <h2>Gregory Leibniz Series</h2>\n        </Container>\n        <Row>\n            <Col>\n                <Container>\n                    <h3 className=\"p-2 text-center\">Explanation</h3>\n                    <p className=\"text-center text-muted\">Coming soon.</p>\n                </Container>\n            </Col>\n            <Col>\n                <Container fluid style={{maxWidth: 500, minWidth:350}} className=\"p-0\">\n                    <GregoryLeibnizSeries/>\n                </Container>\n            </Col>\n        </Row>\n    </Container>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport './scss/custom.scss'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App/>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}